name: CI/CD Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  create:
    tags:
      - 'v*'

env:
  REGISTRY_ID: ${{ secrets.YC_REGISTRY_ID }}
  
jobs:
  build-and-test:
    name: Build and Test  
    runs-on: ubuntu-latest
    
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Install Yandex Cloud CLI
      run: |
        curl -sSL https://storage.yandexcloud.net/yandexcloud-yc/install.sh | bash
        echo "$HOME/yandex-cloud/bin" >> $GITHUB_PATH
    
    - name: Configure Yandex Cloud CLI
      run: |
        echo '${{ secrets.YC_SERVICE_ACCOUNT_KEY }}' > key.json
        yc config set service-account-key key.json
        yc config set cloud-id ${{ secrets.YC_CLOUD_ID }}
        yc config set folder-id ${{ secrets.YC_FOLDER_ID }}
    
    - name: Configure Docker for Yandex Container Registry
      run: |
        yc container registry configure-docker
    
    - name: Generate Docker tags
      id: meta
      run: |
        # Generate consistent tag based on context
        if [[ $GITHUB_REF == refs/tags/v* ]]; then
          # For version tags, use the version
          TAG=${GITHUB_REF#refs/tags/}
        elif [[ $GITHUB_REF == refs/heads/main ]] || [[ $GITHUB_REF == refs/heads/master ]]; then
          # For main branch, use 'latest' and short SHA
          TAG="latest,${GITHUB_SHA:0:7}"
        else
          # For other branches, use branch name and short SHA
          BRANCH_NAME=${GITHUB_REF#refs/heads/}
          BRANCH_NAME=${BRANCH_NAME//\//-}  # Replace / with -
          TAG="${BRANCH_NAME}-${GITHUB_SHA:0:7}"
        fi
        
        # Create full image name
        IMAGE_NAME="cr.yandex/${{ env.REGISTRY_ID }}/test-app"
        
        # Handle multiple tags
        if [[ $TAG == *","* ]]; then
          IFS=',' read -ra TAGS <<< "$TAG"
          FULL_TAGS=""
          for t in "${TAGS[@]}"; do
            if [[ -n $FULL_TAGS ]]; then
              FULL_TAGS="$FULL_TAGS,$IMAGE_NAME:$t"
            else
              FULL_TAGS="$IMAGE_NAME:$t"
            fi
          done
        else
          FULL_TAGS="$IMAGE_NAME:$TAG"
        fi
        
        echo "tags=$FULL_TAGS" >> $GITHUB_OUTPUT
        echo "Generated tags: $FULL_TAGS"
    
    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: ./test-app
        file: ./test-app/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Run basic tests
      run: |
        # Extract the first tag for testing
        IMAGE_TAG=$(echo "${{ steps.meta.outputs.tags }}" | cut -d',' -f1)
        echo "Testing image: $IMAGE_TAG"
        
        # Test that the image can start
        docker run --rm -d -p 8080:80 --name test-container "$IMAGE_TAG"
        sleep 10
        
        # Test health endpoint
        curl -f http://localhost:8080/health || echo "Health endpoint not available, checking main page"
        
        # Test main page
        curl -f http://localhost:8080/ || exit 1
        
        # Cleanup
        docker stop test-container

  deploy:
    name: Deploy to Kubernetes
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install Yandex Cloud CLI
      run: |
        curl -sSL https://storage.yandexcloud.net/yandexcloud-yc/install.sh | bash
        echo "$HOME/yandex-cloud/bin" >> $GITHUB_PATH
    
    - name: Configure Yandex Cloud CLI
      run: |
        echo '${{ secrets.YC_SERVICE_ACCOUNT_KEY }}' > key.json
        yc config set service-account-key key.json
        yc config set cloud-id ${{ secrets.YC_CLOUD_ID }}
        yc config set folder-id ${{ secrets.YC_FOLDER_ID }}
    
    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.27.0'
    
    - name: Get Kubernetes credentials from Yandex Cloud
      run: |
        # Get cluster ID - you can either set K8S_CLUSTER_ID as a secret or use cluster name
        CLUSTER_ID="${{ secrets.K8S_CLUSTER_ID }}"
        
        # If you don't have cluster ID as secret, get it by listing clusters
        if [ -z "$CLUSTER_ID" ]; then
          echo "Getting cluster ID from available clusters..."
          CLUSTER_ID=$(yc managed-kubernetes cluster list --format json | jq -r '.[0].id')
        fi
        
        if [ -z "$CLUSTER_ID" ] || [ "$CLUSTER_ID" = "null" ]; then
          echo "❌ Could not find cluster ID"
          echo "Available clusters:"
          yc managed-kubernetes cluster list
          exit 1
        fi
        
        echo "Using cluster ID: $CLUSTER_ID"
        
        # Get credentials directly from Yandex Cloud
        yc managed-kubernetes cluster get-credentials $CLUSTER_ID --external --force
        
        # Test connection
        echo "Testing Kubernetes connection..."
        kubectl cluster-info
    
    - name: Deploy to Kubernetes
      run: |
        # Determine image tag
        if [[ $GITHUB_REF == refs/tags/v* ]]; then
          IMAGE_TAG=${GITHUB_REF#refs/tags/}
        else
          IMAGE_TAG="latest"
        fi
        
        IMAGE_NAME="cr.yandex/${{ env.REGISTRY_ID }}/test-app:$IMAGE_TAG"
        echo "Deploying image: $IMAGE_NAME"
        
        # Update deployment
        kubectl set image deployment/test-app \
          test-app="$IMAGE_NAME" \
          -n test-app
        
        # Wait for rollout to complete
        kubectl rollout status deployment/test-app -n test-app --timeout=300s
        
        # Verify deployment
        kubectl get pods -n test-app
        kubectl get service test-app-service -n test-app
    
    - name: Run post-deployment tests
      run: |
        # Test using port-forward
        kubectl port-forward service/test-app-service 8080:80 -n test-app &
        FORWARD_PID=$!
        sleep 10
        
        # Test the deployed application
        curl -f http://localhost:8080/ || exit 1
        
        # Cleanup
        kill $FORWARD_PID || true
        
        echo "Deployment successful!"

  cleanup:
    name: Cleanup old images
    runs-on: ubuntu-latest
    needs: deploy
    if: always() && startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Install Yandex Cloud CLI
      run: |
        curl -sSL https://storage.yandexcloud.net/yandexcloud-yc/install.sh | bash
        echo "$HOME/yandex-cloud/bin" >> $GITHUB_PATH
    
    - name: Configure Yandex Cloud CLI
      run: |
        echo '${{ secrets.YC_SERVICE_ACCOUNT_KEY }}' > key.json
        yc config set service-account-key key.json
        yc config set cloud-id ${{ secrets.YC_CLOUD_ID }}
        yc config set folder-id ${{ secrets.YC_FOLDER_ID }}
    
    - name: Clean up old images
      run: |
        yc container image list \
          --registry-id ${{ env.REGISTRY_ID }} \
          --format json | \
          jq -r '.[] | select(.name | contains("test-app")) | .id' | \
          tail -n +11 | \
          xargs -r -I {} yc container image delete {} || true
